{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wuwEAAe,G,MAAA,IAA0B,0C,uBCOnCA,EAAiB,aACjBC,EAAY,8BAA0BD,GAItCE,EAAmB,6CA0JVC,EAxJH,WAEV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAGMC,EAAwB,uCAAG,kCAAAC,EAAA,2DAEVC,OAAbC,EAFuB,EAEvBA,SAFuB,uBAK7BC,QAAQC,IAAI,gCALiB,0BAQ7BD,QAAQC,IAAI,8BAA+BF,GARd,uBAWRA,EAASG,QAAQ,CACtCC,OAAQ,iBAZqB,OAeP,KAJlBC,EAXyB,QAelBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5CX,EAAkBW,GAElBC,KAEAP,QAAQC,IAAI,+BAtBiB,4CAAH,qDA2BxBO,EAAa,uCAAG,gCAAAX,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBU,MAAM,iBALU,0CAUKV,EAASG,QAAQ,CACtCC,OAAQ,wBAXQ,OAUZC,EAVY,OAclBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCT,EAAkBS,EAAS,IAE3BG,IAjBkB,kDAmBlBP,QAAQC,IAAR,MAnBkB,0DAAH,qDAyBbM,EAAkB,uCAAG,kCAAAV,EAAA,sDAEzB,IAAK,EACkBC,QAAbC,EADN,EACMA,WAGAW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YACE,IAAIJ,IAAOK,SAASzB,EAAkB0B,EAAUC,IAAKJ,GAE7DK,GAAG,oBAAoB,SAACC,EAAMC,GAC9CrB,QAAQC,IAAImB,EAAMC,EAAQC,YAC1Bb,MAAM,kMAAD,OAAmMlB,EAAnM,YAAuN8B,EAAQC,gBAGtOtB,QAAQC,IAAI,0BAGZD,QAAQC,IAAI,kCAEd,MAAOsB,GACPvB,QAAQC,IAAIsB,GArBW,2CAAH,qDA2BlBC,EAAoB,uCAAG,sCAAA3B,EAAA,oEAIJC,SAAbC,EAJiB,EAIjBA,UAJiB,wBAOjBW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAASzB,EAAkB0B,EAAUC,IAAKJ,GAE/Ed,QAAQC,IAAI,yCAXW,SAYJwB,EAAkBC,gBAZd,cAYnBC,EAZmB,OAcvB3B,QAAQC,IAAI,0BAdW,UAejB0B,EAAOC,OAfU,QAiBvB5B,QAAQC,IAAR,kEAAuE0B,EAAOE,OAjBvD,wBAmBvB7B,QAAQC,IAAI,kCAnBW,0DAsBzBD,QAAQC,IAAR,MAtByB,0DAAH,qDAsC1B,OAJA6B,qBAAU,WACRlC,OAIA,qBAAKmC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,+BACA,mBAAGA,UAAU,WAAb,mEAGqB,KAAnBrC,EAjBR,wBAAQsC,QAASxB,EAAeuB,UAAU,mCAA1C,+BAoBQ,wBAAQC,QAASR,EAAsBO,UAAU,mCAAjD,yBAKJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,IACtD,mBACEJ,UAAU,cACVK,KAAM9C,EACN+C,OAAO,SACPC,IAAI,aAJN,6BAKejD,cC1JzBkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7c0c7f39.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = 'obasekiosa';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0xafed0a5B2dC88BfE24Ee0103C7384d8f61962fDA\";\n\nconst App = () => {\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  // check ethereum object exists\n  const checkIfWalletIsConnected = async () => {\n    \n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  // connect wallet to site\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        connectedContract.on(\"NewEpicNFTMInted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n\n\n  const askContractToMintNft = async () => {\n    \n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Minning...Please wait.\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          { currentAccount === \"\" ? ( \n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}